"""
1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
В расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия. Для выполнения расчета
для конкретных значений необходимо запускать скрипт с параметрами.

"""

# from sys import argv
# try:
#     working_out, rate, prize = map(int, argv[1:])
#     wage = (working_out * rate + prize)
#     print(f'Название - {argv[0]}')
#     print(f'Выработка - {argv[1]}')
#     print(f'Ставка в час - {argv[2]}')
#     print(f'Премия - {argv[3]}')
#     print(f'Заработная плата сотрудника равна: {wage}')
# except ValueError:
#     print(f'Введите число')

# Под Ubuntu через терминал PyCharm проверял по команде python3 Lesson4.py 8 100 50
# Название - Lesson4.py
# Выработка - 8
# Ставка в час - 100
# Премия - 50
# Заработная плата сотрудника равна: 850

'''
2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка использовать генератор.
Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
Результат: [12, 44, 4, 10, 78, 123].
'''
# original_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
# new_list = [original_list[i+1] for i in range(len(original_list)-1) if original_list[i] < original_list[i+1]]
# print(f'Исходный список: {original_list}')
# print(f'Итоговый список: {new_list}')

'''
3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
Подсказка: использовать функцию range() и генератор.
'''

# new_list = [i for i in range(20, 241) if i % 20 == 0 or i % 21 == 0]  # 240 включается в список
# print(new_list)

'''
4. Представлен список чисел. Определить элементы списка, не имеющие повторений. Сформировать итоговый массив чисел, 
соответствующих требованию. Элементы вывести в порядке их следования в исходном списке. 
Для выполнения задания обязательно использовать генератор. 
Пример исходного списка: 
[2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
Результат: [23, 1, 3, 10, 4, 11]
'''

# old_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
# new_list = [el for el in old_list if old_list.count(el) == 1]  #  находим количество повторений методом count()
# print(new_list)

'''
5. Реализовать формирование списка, используя функцию range() и возможности генератора. В список должны войти четные 
числа от 100 до 1000 (включая границы). Необходимо получить результат вычисления произведения всех элементов списка.
Подсказка: использовать функцию reduce().
'''

# from functools import reduce
#
# li = [el for el in range(100, 1001) if el % 2 == 0]  # 1000 включается в список
#
#
# def my_func(prev_el, el):
#     # prev_el - предыдущий элемент
#     # el - текущий элемент
#     return prev_el * el
#
#
# print(reduce(my_func, li))

'''
6. Реализовать два небольших скрипта:
а) итератор, генерирующий целые числа, начиная с указанного,
б) итератор, повторяющий элементы некоторого списка, определенного заранее.
Подсказка: использовать функцию count() и cycle() модуля itertools. Обратите внимание, что создаваемый цикл не должен
быть бесконечным. Необходимо предусмотреть условие его завершения.
Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл. 
Во втором также необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено.
'''
# а) итератор, генерирующий целые числа, начиная с указанного,
# from sys import argv
# from itertools import count
# try:
#     num, repeat_num = map(int, argv[1:])
#     for el in count(num):
#         if el > repeat_num:
#             break
#         else:
#             print(el)
# except ValueError:
#     print(f'Введите число')

# б) итератор, повторяющий элементы некоторого списка, определенного заранее
# from sys import argv
# from itertools import cycle
# path, my_value, repeat_value = argv
# c = 0
# for el in cycle(argv[1]):
#     if c > int(argv[2]):
#         break
#     print(el)
#     c += 1

'''
7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. При вызове функции
 должен создаваться объект-генератор. Функция должна вызываться следующим образом: for el in fact(n). Функция отвечает
  за получение факториала числа, а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.
Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.
'''

# n = int(input('Введите число: '))
#
#
# def fact():
#     fact = 1
#     for i in range(1, n + 1):
#         fact *= i
#         yield fact
#
#
# g = fact()
# c = 0
# for i in g:
#     if c < n:
#         print(i)
#         c += 1
#     else:
#         break
